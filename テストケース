# 新人エンジニア向け テストケース作成完全ガイド

## はじめに

「テストケースってどうやって書けばいいの？」
「漏れなくテストするには何をチェックすればいい？」

新人エンジニアの皆さんが必ず直面するこの疑問に、実務経験を基にお答えします。今回は特に重要な3つの観点に焦点を当てて、実践的なテストケース作成方法を解説します。

## 目次
1. [テストケース作成の基本](#1-テストケース作成の基本)
2. [①外部設計書通りの画面実装チェック](#2-外部設計書通りの画面実装チェック)
3. [②イベント処理の正常動作チェック](#3-イベント処理の正常動作チェック)
4. [③ボタン活性化状態のチェック](#4-ボタン活性化状態のチェック)
5. [テストケース作成のベストプラクティス](#5-テストケース作成のベストプラクティス)
6. [実践演習](#6-実践演習)

---

## 1. テストケース作成の基本

### 1.1 テストケースとは？

テストケースとは、**「この条件でテストを実行すると、この結果が得られるはず」**という仕様を明文化したものです。

**良いテストケースの条件：**
- **再現可能** - 誰が実行しても同じ結果が得られる
- **具体的** - 曖昧な表現がない
- **独立性** - 他のテストに依存しない
- **検証可能** - 合格/不合格を明確に判定できる

### 1.2 テストケースの基本構成

```
テストケースID: TC001
テスト項目: ログイン機能_正常系
前提条件: 有効なユーザーアカウントが存在する
テスト手順:
  1. ログイン画面を表示する
  2. 正しいユーザーID "test_user" を入力する
  3. 正しいパスワード "password123" を入力する
  4. [ログイン]ボタンをクリックする
期待結果: ホーム画面に遷移し、「ようこそ、test_userさん」と表示される
```

---

## 2. ①外部設計書通りの画面実装チェック

### 2.1 なぜ外部設計書との突合が重要？

外部設計書は「ユーザーから見たシステムの仕様書」です。ここに書かれた通りに実装されていないと：
- **ユーザビリティの低下** - 使いにくいシステムになる
- **仕様齟齬** - 後々大きな修正が必要になる
- **品質問題** - 期待と異なる動作でクレームに繋がる

### 2.2 画面チェックのポイント

#### A. レイアウト・配置
```
【チェック項目例】
□ ヘッダー部分にロゴが左上に配置されている
□ ナビゲーションメニューがヘッダー右側に表示されている
□ フッター部分に著作権表示がある
□ サイドバーの幅が設計書通り（例：200px）である

【テストケース記載例】
TC_UI_001: ヘッダーレイアウト確認
手順: トップページを表示する
期待結果: 
  - ロゴが画面左上（座標 10,10）に表示される
  - ロゴサイズが 120×40px である
  - ナビゲーションメニューが右寄せで表示される
```

#### B. 色・フォント・サイズ
```
【チェック項目例】
□ メインカラーが設計書通り（例：#3366CC）
□ フォントサイズが仕様通り（見出し：16px、本文：14px）
□ ボタンの色が状態に応じて変化する

【テストケース記載例】
TC_UI_002: ボタンカラー確認
手順: 
  1. [保存]ボタンを確認する（通常状態）
  2. [保存]ボタンにマウスオーバーする
  3. [保存]ボタンをクリックして押下状態にする
期待結果:
  - 通常状態: 背景色 #007BFF、文字色 #FFFFFF
  - ホバー状態: 背景色 #0056B3
  - 押下状態: 背景色 #004085
```

#### C. 文言・ラベル
```
【チェック項目例】
□ ボタンのラベルが設計書通り
□ エラーメッセージの文言が正確
□ 多言語対応の場合、各言語で正しく表示される

【テストケース記載例】
TC_UI_003: ボタンラベル確認
手順: ユーザー登録画面を表示する
期待結果: 
  - 主ボタンのラベルが「新規登録」である
  - 副ボタンのラベルが「キャンセル」である
  - 必須項目に「*」マークが表示される
```

### 2.3 実践的なチェックリスト

```markdown
## 画面実装チェックリスト

### 基本レイアウト
- [ ] ヘッダー・フッター・サイドバーの配置
- [ ] グリッドシステムに沿ったレイアウト
- [ ] レスポンシブ対応（PC/タブレット/スマホ）
- [ ] スクロール領域の設定

### 色・デザイン
- [ ] カラーパレットの統一
- [ ] フォント種類・サイズの統一
- [ ] アイコンのサイズ・色の統一
- [ ] 影・枠線などの装飾要素

### 文字・文言
- [ ] ラベル・ボタン名の正確性
- [ ] エラーメッセージの内容
- [ ] ヘルプテキストの表示
- [ ] 改行・文字数制限の適用

### 入力項目
- [ ] 入力フィールドのサイズ・形式
- [ ] プレースホルダーテキスト
- [ ] 必須/任意の表示
- [ ] バリデーションエラーの表示位置
```

---

## 3. ②イベント処理の正常動作チェック

### 3.1 イベント処理とは？

ユーザーの操作（クリック、入力、選択など）に対するシステムの反応のことです。

**主なイベントの種類：**
- **マウスイベント** - クリック、ダブルクリック、右クリック
- **キーボードイベント** - キー入力、Enter、Tab
- **フォームイベント** - 送信、リセット、バリデーション
- **画面遷移イベント** - ページロード、リンククリック

### 3.2 イベント処理テストの観点

#### A. 正常系テスト
```
【基本操作の確認】
TC_EVENT_001: ボタンクリック処理
前提条件: ユーザー一覧画面が表示されている
手順:
  1. 一覧の1行目の[編集]ボタンをクリックする
期待結果:
  - ユーザー編集画面に遷移する
  - URLが "/users/edit/1" になる
  - 選択したユーザーの情報が表示される

TC_EVENT_002: フォーム送信処理
前提条件: お問い合わせフォームが表示されている
手順:
  1. 名前欄に "山田太郎" を入力する
  2. メール欄に "yamada@example.com" を入力する
  3. 内容欄に "テスト投稿" を入力する
  4. [送信]ボタンをクリックする
期待結果:
  - 送信完了画面に遷移する
  - "お問い合わせを受け付けました" メッセージが表示される
  - 管理者に通知メールが送信される
```

#### B. 異常系テスト
```
【エラーハンドリングの確認】
TC_EVENT_003: 必須項目未入力エラー
前提条件: 会員登録フォームが表示されている
手順:
  1. メールアドレス欄を空のままにする
  2. [登録]ボタンをクリックする
期待結果:
  - フォーム送信されない
  - メールアドレス欄の下に赤文字で「メールアドレスを入力してください」と表示
  - メールアドレス欄の枠線が赤色になる

TC_EVENT_004: サーバーエラー時の処理
前提条件: ネットワークエラーを模擬できる環境
手順:
  1. データ保存処理中にネットワークを切断する
期待結果:
  - エラーダイアログが表示される
  - "通信エラーが発生しました。再度お試しください。" メッセージ
  - [再試行]ボタンが表示される
```

#### C. 境界値テスト
```
【限界値での動作確認】
TC_EVENT_005: 文字数制限テスト
前提条件: コメント入力フォーム（最大100文字）
手順:
  1. 99文字のテキストを入力する → 正常に入力される
  2. 100文字のテキストを入力する → 正常に入力される
  3. 101文字のテキストを入力しようとする
期待結果:
  - 101文字目が入力できない
  - 文字数カウンターが "100/100" と表示される
  - 警告メッセージは表示されない
```

### 3.3 非同期処理のテスト

```
【Ajax・非同期処理の確認】
TC_EVENT_006: 検索機能の非同期処理
手順:
  1. 検索ボックスに "山田" と入力する
  2. 2秒待つ（オートコンプリート機能）
期待結果:
  - ローディングアイコンが表示される
  - 2秒後に候補リストが表示される
  - "山田太郎"、"山田花子" などの候補が表示される
  - 他の画面操作が阻害されない

TC_EVENT_007: ファイルアップロード処理
手順:
  1. [ファイル選択]ボタンをクリックする
  2. 1MBの画像ファイルを選択する
  3. [アップロード]ボタンをクリックする
期待結果:
  - プログレスバーが表示される
  - アップロード中は他のボタンが無効化される
  - 完了後、"アップロードが完了しました" メッセージ
  - 選択したファイルがプレビュー表示される
```

---

## 4. ③ボタン活性化状態のチェック

### 4.1 なぜボタンの活性化制御が重要？

ボタンの活性化制御は、**ユーザーが間違った操作をしないための重要な仕組み**です。

**適切な制御により：**
- **誤操作防止** - 無効な状態での実行を防ぐ
- **ユーザビリティ向上** - 何ができるかが直感的に分かる
- **システム保護** - 不正な処理の実行を防ぐ

### 4.2 ボタン状態の種類と確認ポイント

#### A. 初期状態の確認
```
TC_BTN_001: ページ表示時のボタン状態
前提条件: 会員登録フォームを開く
手順: ページを表示する
期待結果:
  - [登録]ボタンが無効状態（disabled）
  - ボタンの背景色がグレー（#CCCCCC）
  - マウスオーバーしてもカーソルが変化しない
  - ボタンクリックしても何も起こらない
```

#### B. 条件による活性化
```
TC_BTN_002: 必須項目入力による活性化
前提条件: 会員登録フォームが表示されている
手順:
  1. 名前欄に "山田太郎" を入力する
  2. メール欄に "yamada@example.com" を入力する
  3. パスワード欄に "password123" を入力する
期待結果:
  - 全ての必須項目入力後、[登録]ボタンが有効になる
  - ボタンの背景色が青（#007BFF）になる
  - マウスオーバーでカーソルがポインターになる

TC_BTN_003: バリデーションエラー時の無効化
前提条件: 会員登録フォームで[登録]ボタンが有効状態
手順:
  1. メール欄の内容を "invalid-email" に変更する
期待結果:
  - [登録]ボタンが即座に無効状態になる
  - メール欄にエラーメッセージが表示される
```

#### C. 処理中の状態制御
```
TC_BTN_004: 処理中のボタン制御
前提条件: データ保存処理が可能な状態
手順:
  1. [保存]ボタンをクリックする
  2. 処理完了まで待つ
期待結果:
  - クリック直後：ボタンが無効化される
  - ボタンテキストが "保存中..." に変更される
  - ローディングアイコンが表示される
  - 処理完了後：ボタンが元の状態に戻る
```

#### D. 権限による制御
```
TC_BTN_005: ユーザー権限による表示制御
前提条件: 一般ユーザーでログインしている
手順: ユーザー管理画面を表示する
期待結果:
  - [削除]ボタンが表示されない
  - [編集]ボタンは表示されるが無効状態
  - [詳細]ボタンのみ有効状態

TC_BTN_006: 管理者権限での表示制御
前提条件: 管理者ユーザーでログインしている
手順: ユーザー管理画面を表示する
期待結果:
  - [削除]ボタンが表示され、有効状態
  - [編集]ボタンが表示され、有効状態
  - 全てのボタンが正常に機能する
```

### 4.3 状態遷移テスト

```
TC_BTN_007: ボタン状態の遷移確認
シナリオ: お問い合わせフォームでの状態変化
手順:
  1. 初期表示 → [送信]ボタン：無効
  2. 名前入力 → [送信]ボタン：無効（他必須項目未入力）
  3. 全必須項目入力 → [送信]ボタン：有効
  4. 必須項目を削除 → [送信]ボタン：無効
  5. 再度入力 → [送信]ボタン：有効
  6. 送信実行 → [送信]ボタン：無効（処理中）
  7. 処理完了 → 画面遷移（ボタン非表示）
期待結果: 各段階で期待される状態に正しく遷移する
```

### 4.4 ボタン状態チェックリスト

```markdown
## ボタン活性化チェックリスト

### 初期状態
- [ ] ページ読み込み時の初期状態が正しい
- [ ] 権限に応じた表示/非表示制御
- [ ] 無効ボタンの見た目（色・カーソル）

### 動的制御
- [ ] 入力値による有効/無効の切り替え
- [ ] バリデーションエラー時の無効化
- [ ] 選択状態による制御（チェックボックス等）

### 処理中制御
- [ ] 処理実行中の無効化
- [ ] ローディング表示の制御
- [ ] 二重送信防止機能

### 状態表示
- [ ] ボタンテキストの動的変更
- [ ] アイコンの表示/非表示
- [ ] プログレス表示

### 復旧処理
- [ ] エラー後の状態復旧
- [ ] 処理完了後の状態復旧
- [ ] タイムアウト時の制御
```

---

## 5. テストケース作成のベストプラクティス

### 5.1 効率的なテストケース作成手順

#### ステップ1: 設計書の理解
```
1. 外部設計書・画面設計書を熟読
2. 業務フローを理解
3. ユーザーの操作パターンを想像
4. 例外ケースを洗い出し
```

#### ステップ2: テスト観点の整理
```
【機能観点】
- 基本機能は動作するか？
- エラーハンドリングは適切か？
- パフォーマンスは問題ないか？

【UI/UX観点】
- 設計通りの見た目か？
- 操作しやすいか？
- 分かりやすいか？

【セキュリティ観点】
- 不正な操作はできないか？
- 権限制御は正しいか？
- データは保護されているか？
```

#### ステップ3: 優先順位付け
```
【高優先度】
- 基本的な正常系シナリオ
- 致命的なエラーケース
- セキュリティ関連

【中優先度】
- 複雑な業務シナリオ
- 境界値テスト
- 例外処理

【低優先度】
- 稀なユースケース
- 非機能要件の詳細確認
```

### 5.2 テストケース記述のコツ

#### A. 明確で具体的な記述
```
❌ 悪い例:
手順: ログインする
期待結果: ログインできる

✅ 良い例:
手順: 
  1. ログイン画面でユーザーID欄に "test_user" を入力
  2. パスワード欄に "password123" を入力
  3. [ログイン]ボタンをクリック
期待結果:
  - ホーム画面（/home）に遷移する
  - 画面右上に "ようこそ、test_userさん" と表示される
  - セッションタイムアウトまでログイン状態が継続する
```

#### B. 再現可能な条件設定
```
❌ 曖昧な前提条件:
前提条件: 商品がある状態

✅ 具体的な前提条件:
前提条件: 
  - 商品マスタに以下のデータが存在する
    - 商品ID: P001, 商品名: テスト商品A, 価格: 1000円, 在庫: 10個
    - 商品ID: P002, 商品名: テスト商品B, 価格: 2000円, 在庫: 0個
  - ユーザー "test_user" でログイン済み
```

#### C. 判定基準の明確化
```
❌ 曖昧な期待結果:
期待結果: エラーメッセージが表示される

✅ 明確な期待結果:
期待結果:
  - エラーダイアログが画面中央に表示される
  - タイトル: "エラー"
  - メッセージ: "在庫が不足しています。"
  - [OK]ボタンのみ表示される
  - ダイアログ外をクリックしても閉じない
```

### 5.3 テストデータの設計

```markdown
## テストデータ設計の基本

### マスタデータ
- ユーザー（一般/管理者/無効ユーザー）
- 商品（通常/売り切れ/削除済み）
- カテゴリ（親/子カテゴリ）

### トランザクションデータ
- 注文（新規/処理中/完了/キャンセル）
- 決済（成功/失敗/保留）
- ログ（正常/エラー/警告）

### 境界値データ
- 最小値/最大値
- 文字数制限の境界
- 日付の境界（過去/未来/当日）
```

---

## 6. 実践演習

### 6.1 演習問題：ECサイトの商品購入機能

以下の仕様に基づいて、テストケースを作成してください。

**機能仕様：**
```
【商品購入画面】
- 商品画像、名前、価格、在庫数を表示
- 購入数量を入力（1〜在庫数まで）
- [カートに追加]ボタン
  - 在庫がある場合のみ有効
  - 購入数量が1以上の場合のみ有効
  - クリック後、カート画面に遷移
```

**作成するテストケース：**
1. 外部設計書通りの画面表示
2. 購入数量入力のイベント処理
3. [カートに追加]ボタンの活性化制御

### 6.2 解答例

```
TC_SHOP_001: 商品購入画面の表示確認
前提条件: 商品ID "P001" の在庫が5個ある
手順: 商品購入画面を表示する
期待結果:
  - 商品画像が左側に表示される（サイズ: 300×300px）
  - 商品名が画像右側上部に表示される
  - 価格が商品名の下に "¥1,000" の形式で表示される
  - 在庫数が "残り5個" と表示される
  - 数量入力欄が表示される（初期値: 1）
  - [カートに追加]ボタンが有効状態で表示される

TC_SHOP_002: 購入数量入力の制御
前提条件: 商品購入画面が表示されている（在庫5個）
手順:
  1. 数量欄に "0" を入力する
  2. 数量欄に "6" を入力する
  3. 数量欄に "3" を入力する
期待結果:
  1. "0" 入力時：[カートに追加]ボタンが無効になる
  2. "6" 入力時：エラーメッセージ「在庫数を超えています」表示、ボタン無効
  3. "3" 入力時：エラーメッセージ消去、ボタン有効

TC_SHOP_003: 在庫切れ時のボタン制御
前提条件: 商品ID "P002" の在庫が0個
手順: 商品購入画面を表示する
期待結果:
  - 在庫数が "在庫切れ" と赤文字で表示される
  - 数量入力欄が無効状態（グレーアウト）
  - [カートに追加]ボタンが無効状態
  - ボタンテキストが "売り切れ" に変更される
```

---

## まとめ

### 重要なポイントの再確認

1. **外部設計書との突合**
   - 見た目だけでなく、動作も含めて確認
   - ユーザー視点で期待される動作を検証
   - 細かい仕様まで漏れなくチェック

2. **イベント処理の確認**
   - 正常系だけでなく異常系も忘れずに
   - 非同期処理の動作も確認
   - エラーハンドリングの適切性を検証

3. **ボタン活性化制御**
   - 初期状態から完了まで全状態を確認
   - 権限による制御も含めて検証
   - 誤操作防止の仕組みが機能するか確認

### 新人エンジニアへのアドバイス

**🎯 最初は完璧を目指さない**
まずは基本的な正常系から始めて、徐々に複雑なケースに挑戦しましょう。

**🔍 ユーザー目線を忘れない**
技術的な観点だけでなく、実際にシステムを使うユーザーの立場で考えることが大切です。

**📝 継続的な改善**
テスト実行結果を振り返り、見つからなかった不具合があれば、テストケースを追加・改善しましょう。

**🤝 チームで知識共有**
良いテストケースや見つけた課題は、チーム全体で共有して品質向上に活かしましょう。

テストケース作成は経験を積むことで確実に上達します。最初は大変かもしれませんが、継続的に取り組むことで、より良いソフトウェア開発に貢献できるエンジニアになれるはずです！

---

**参考資料**
- [テスト技法の基礎知識]
- [UIテスト自動化ツールの活用]
- [テストケース管理ツールの使い方]
