# 📊 デモデータで学ぶTableau進捗管理ダッシュボード完全攻略

> **この記事で学べること**
> - 実際のプロジェクトデータを使った進捗管理ダッシュボードの作成
> - マネージャーが求める5つの重要指標の可視化
> - 遅延プロジェクトを早期発見するアラート機能
> - チームの生産性を最大化するリソース配分分析

## 🎯 今回使用するデモデータの概要

**プロジェクト設定**
- **5つのプロジェクト**: ECサイトリニューアル、CRMシステム導入、データ分析基盤構築、セキュリティ強化、モバイルアプリ開発
- **50のタスク**: 要件定義から リリースまでの全工程
- **10名のチームメンバー**: 開発部、システム部、プロジェクト推進部
- **3か月間のプロジェクト期間**: 2024年1月〜4月

---

## 📋 ステップ1: データ構造の理解と準備

### メインテーブル: プロジェクトタスク
```
タスクID | プロジェクト | タスク名 | フェーズ | 担当者 | 開始日 | 終了予定日 | 実終了日 | 進捗率 | ステータス | 優先度 | 予定工数 | 実績工数 | 部署
```

### サブテーブル: チームメンバー  
```
担当者ID | 担当者名 | 部署 | 役職 | スキルレベル | 時給単価 | 稼働率
```

**💡 データ品質チェックポイント**
- 進捗率は0-100%の範囲内か？
- 開始日 ≤ 終了予定日の関係は正しいか？
- ステータスと進捗率の整合性は取れているか？

---

## 📊 ステップ2: 5つの基本KPI指標の作成

### 1. 全体進捗率メーター

**計算フィールド: 全体進捗率**
```tableau
// 全プロジェクトの平均進捗率
AVG([進捗率])
```

**ゲージチャートの作成**
1. **新しいワークシート**を作成
2. **行**: 計算フィールド「全体進捗率」
3. **マークタイプ**: ゲージ選択
4. **色**: 進捗レベルに応じた条件付き書式

```tableau
// 進捗色分け計算フィールド
IF [全体進捗率] >= 80 THEN "優秀"
ELSEIF [全体進捗率] >= 60 THEN "良好"  
ELSEIF [全体進捗率] >= 40 THEN "注意"
ELSE "危険"
END
```

### 2. 完了タスク数カウンター

**計算フィールド: 完了タスク**
```tableau
COUNT(IF [ステータス] = "完了" THEN 1 END)
```

**計算フィールド: 総タスク数**
```tableau
COUNT([タスクID])
```

**Big Number表示**
- **テキスト**: `完了タスク` / `総タスク数`
- **フォーマット**: 「18/25」形式

### 3. 遅延タスクアラート

**計算フィールド: 遅延日数**
```tableau
IF [ステータス] != "完了" AND [終了予定日] < TODAY() 
THEN DATEDIFF('day', [終了予定日], TODAY())
ELSE 0
END
```

**計算フィールド: 遅延タスク数**
```tableau
COUNT(IF [遅延日数] > 0 THEN 1 END)
```

### 4. 予算消化率

**計算フィールド: 予算使用額**
```tableau
// チームメンバーテーブルとJOIN
SUM([実績工数] * [時給単価])
```

**計算フィールド: 予算消化率**
```tableau
[予算使用額] / SUM([予定工数] * [時給単価]) * 100
```

### 5. 残り日数カウントダウン

**計算フィールド: プロジェクト終了日**
```tableau
// 最も遅い終了予定日
MAX([終了予定日])
```

**計算フィールド: 残り日数**
```tableau
DATEDIFF('day', TODAY(), [プロジェクト終了日])
```

---

## 📈 ステップ3: 進捗分析チャートの作成

### 1. フェーズ別進捗率（横棒グラフ）

**目的**: どのフェーズがボトルネックかを特定

**設定手順**
1. **行**: フェーズ
2. **列**: AVG(進捗率)
3. **色**: 進捗レベル（前述の計算フィールド使用）
4. **ラベル**: 進捗率を表示

**分析ポイント**
- 要件定義: 100% → 完了済み
- 設計: 85% → 順調
- 開発: 52% → 要注意（リソース追加検討）
- テスト: 30% → 未着手多数
- リリース: 0% → 予定通り

### 2. バーンダウンチャート

**週次進捗データの作成**
```tableau
// 計算フィールド: 週番号
DATEPART('week', [開始日])

// 計算フィールド: 累積完了工数  
RUNNING_SUM(SUM(IF [ステータス] = "完了" THEN [実績工数] END))

// 計算フィールド: 理想線
MAX(SUM([予定工数])) - (INDEX() - 1) * MAX(SUM([予定工数])) / SIZE()
```

**チャート設定**
- **X軸**: 週番号
- **Y軸**: 残作業量
- **2つの線**: 実績線（赤）、理想線（青、点線）

**読み取りポイント**
- 実績線が理想線より上 → 遅延傾向
- 実績線が理想線より下 → 前倒し傾向

### 3. ガントチャート（タスクタイムライン）

**基本設定**
1. **行**: タスク名（優先度でソート）
2. **列**: 開始日（連続）
3. **サイズ**: 期間（終了予定日 - 開始日）
4. **色**: ステータス

**進捗バーの追加（デュアル軸）**
```tableau
// 計算フィールド: 進捗期間
([終了予定日] - [開始日]) * [進捗率] / 100
```

**設定手順**
- 同じチャートに「進捗期間」を追加
- **デュアル軸**設定
- 透明度を50%に設定して重ね合わせ

---

## 👥 ステップ4: リソース分析ダッシュボード

### 1. 担当者別作業負荷（ヒートマップ）

**目的**: チームメンバーの作業配分バランスを確認

**設定**
- **行**: 担当者
- **列**: プロジェクト  
- **色**: SUM(予定工数)
- **マークタイプ**: 四角形

**負荷レベルの色分け**
```tableau
// 計算フィールド: 負荷レベル
IF SUM([予定工数]) > 40 THEN "過負荷"
ELSEIF SUM([予定工数]) > 30 THEN "適正"
ELSEIF SUM([予定工数]) > 20 THEN "軽負荷"
ELSE "空き"
END
```

### 2. スキル×稼働率マトリックス

**散布図設定**
- **X軸**: スキルレベル（数値変換）
- **Y軸**: 稼働率
- **色**: 部署
- **サイズ**: 担当タスク数

**スキルレベル数値変換**
```tableau
CASE [スキルレベル]
    WHEN "初級" THEN 1
    WHEN "中級" THEN 2  
    WHEN "上級" THEN 3
    WHEN "エキスパート" THEN 4
END
```

**分析観点**
- 右上（高スキル×高稼働）: エース級、燃え尽き注意
- 左下（低スキル×低稼働）: 成長機会の提供
- 右下（高スキル×低稼働）: リソース有効活用

---

## 🚨 ステップ5: アラートシステムの構築

### 1. 遅延タスク詳細テーブル

**フィルター設定**
```tableau
[遅延日数] > 0
```

**表示項目**
- タスクID
- プロジェクト名
- 担当者
- 遅延日数
- 優先度

**条件付き書式**
```tableau
// 遅延日数の色分け
IF [遅延日数] > 7 THEN "緊急"
ELSEIF [遅延日数] > 3 THEN "警告"  
ELSE "注意"
END
```

### 2. リスクプロジェクト識別

**計算フィールド: リスクスコア**
```tableau
// 複数要因を組み合わせたリスク評価
(AVG(IF [進捗率] < 50 THEN 1 ELSE 0 END) * 3) +
(COUNT(IF [遅延日数] > 0 THEN 1 END) / COUNT([タスクID]) * 2) +
(IF [予算消化率] > 90 THEN 1 ELSE 0 END * 1)
```

**リスクレベル判定**
```tableau
IF [リスクスコア] >= 3 THEN "高リスク"
ELSEIF [リスクスコア] >= 2 THEN "中リスク"
ELSE "低リスク"  
END
```

---

## 📱 ステップ6: 統合ダッシュボードの設計

### レイアウト構成

```
┌─────────────────────────────────────────┐
│           📊 KPI サマリー                │
│  [全体進捗] [完了率] [遅延数] [残日数]     │
├──────────────────┬──────────────────────┤
│   📈 バーンダウン   │    🚨 遅延アラート    │
│   (トレンド分析)   │    (緊急対応要)       │
├──────────────────┼──────────────────────┤
│   📅 ガントチャート │    👥 リソース分析    │
│   (タスク詳細)     │    (負荷バランス)     │
├──────────────────┴──────────────────────┤
│           📋 フェーズ別進捗状況            │
└─────────────────────────────────────────┘
```

### インタラクション設計

**1. ドリルダウン機能**
- プロジェクト選択 → タスク詳細表示
- 担当者選択 → 個人タスク一覧

**2. フィルター連携**
- 期間スライダー: 全チャート同期更新
- 部署フィルター: チーム別表示切り替え

**3. ハイライト機能**
- 遅延タスクのマウスオーバー → 関連情報表示
- リスクプロジェクトの自動ハイライト

---

## 🎨 ステップ7: 見た目とUXの最適化

### 色彩設計

**統一カラーパレット**
```
進捗状況:
- 完了: #2ECC71 (グリーン)
- 進行中: #3498DB (ブルー) 
- 遅延: #E74C3C (レッド)
- 未開始: #95A5A6 (グレー)

優先度:
- 高: #E74C3C (レッド)
- 中: #F39C12 (オレンジ)
- 低: #95A5A6 (グレー)
```

### フォント・レイアウト

**階層構造**
- **タイトル**: 18pt, Bold
- **サブタイトル**: 14pt, Medium  
- **本文**: 12pt, Regular
- **注釈**: 10pt, Light

**余白とグリッド**
- チャート間余白: 20px
- セクション区切り: 1px solid #E8E8E8
- グリッドシステム: 12列レイアウト

---

## 📊 ステップ8: 実践的な分析シナリオ

### シナリオ1: 週次進捗レビュー

**確認ポイント**
1. **全体進捗率**: 72% → 目標80%に対して8%の遅れ
2. **遅延タスク**: 3件発見 → 優先対応リスト作成
3. **リソース状況**: 山田さんが過負荷 → 作業分散検討

**アクション計画**
- 遅延タスクT004の優先度上げ
- 山田さんから佐藤さんへタスク移管
- 次週までにテストフェーズ開始準備

### シナリオ2: 月次マネジメント報告

**経営陣向け指標**
1. **予算消化率**: 68% → 予算内で推進中
2. **スケジュール達成率**: 遅延3日 → 軽微な影響
3. **品質指標**: テスト未実施のため評価保留

**意思決定支援**
- 追加リソース投入の必要性: 低
- スケジュール変更の検討: 不要
- 次期プロジェクトへの教訓: リスト化

### シナリオ3: 緊急事態対応

**アラート発生時**
1. **高リスクプロジェクト**: ECサイトリニューアル
2. **要因分析**: 設計変更による工数増加
3. **影響範囲**: 後続タスク2週間遅延可能性

**対応策**
- 緊急チーム編成
- 外部リソース活用検討  
- ステークホルダー説明準備

---

## 🔧 トラブルシューティング & FAQ

### よくある問題と解決法

**Q1: ガントチャートで日付がうまく表示されない**
```tableau
// 解決方法: 日付フィールドを「連続」に変更
右クリック → 「連続」選択
```

**Q2: 進捗率が正しく計算されない**
```tableau
// 問題: NULL値が含まれている
// 解決: NULL値の処理を追加
IFNULL([進捗率], 0)
```

**Q3: パフォーマンスが遅い**
- データ抽出（Extract）の使用
- 不要な計算フィールドの削除
- フィルターの最適化

### パフォーマンス最適化 Tips

**1. データソース最適化**
- 必要な列のみ選択
- 日付範囲でフィルタリング
- インデックスの活用

**2. 計算フィールド最適化**
```tableau
// ❌ 遅い
IF CONTAINS([タスク名], "重要") THEN "重要" ELSE "通常" END

// ✅ 速い  
IF [優先度] = "高" THEN "重要" ELSE "通常" END
```

---

## 🚀 次のレベルへ: 発展的活用

### 自動化・連携機能

**1. データ自動更新**
- スケジュール設定: 毎日午前9時
- データソース: Google Sheets連携
- 通知設定: 異常値検知時アラート

**2. 外部システム連携**
```python
# Python + Tableau REST API
import tableauserverclient as TSC

# ダッシュボード自動公開
server.workbooks.publish(workbook, publish_mode='CreateNew')
```

**3. モバイル対応**
- レスポンシブレイアウト
- タッチ操作最適化
- オフライン表示対応

### 高度な分析機能

**1. 予測分析**
```tableau
// 線形回帰による完了予測日
SCRIPT_REAL("
import numpy as np
from sklearn.linear_model import LinearRegression
# 予測ロジック
return predicted_date
", [進捗率], [経過日数])
```

**2. 異常検知**
- 統計的管理図
- 季節性調整
- 外れ値自動検出

---

## 📋 まとめ: 成功する進捗管理ダッシュボードの5原則

### 1. **目的明確化**
- 誰が、何のために使うかを定義
- KPIの優先順位を設定
- 更新頻度とタイミングを決定

### 2. **データ品質確保**
- 入力ルールの標準化
- バリデーション機能の実装
- 定期的なデータクレンジング

### 3. **ユーザビリティ重視**
- 3クリック以内で欲しい情報にアクセス
- 直感的な色とレイアウト
- モバイルファーストな設計

### 4. **アクション志向**
- 問題発見だけでなく解決策提示
- ドリルダウンで根本原因分析
- 次のアクション明確化

### 5. **継続的改善**
- ユーザーフィードバック収集
- 利用統計の分析
- 定期的なバージョンアップ

---

## 🎯 チェックリスト: ダッシュボード完成度診断

### 基本機能 ✅
- [ ] KPI指標が一目で分かる
- [ ] 遅延タスクが即座に特定できる
- [ ] リソース配分が可視化されている
- [ ] 予算状況が把握できる
- [ ] 今後の見通しが分かる

### 運用面 ✅
- [ ] データ更新が自動化されている
- [ ] アクセス権限が適切に設定されている
- [ ] バックアップ体制が整っている
- [ ] 利用マニュアルが整備されている
- [ ] サポート体制が確立されている

### 発展性 ✅
- [ ] 新しいプロジェクトに対応可能
- [ ] 組織変更に柔軟に対応
- [ ] 他システムとの連携余地
- [ ] スケールアップ可能な設計
- [ ] 技術革新への対応力

---

**🎉 おめでとうございます！**

このガイドを完了すれば、実践的な進捗管理ダッシュボードが完成します。デモデータを使った学習から始まり、実際のプロジェクトデータでの運用まで、段階的にスキルアップしていきましょう。

**次回予告**: 「Tableau + AI: 機械学習による進捗予測ダッシュボード」

---

*💪 実践が一番の学習です。まずはデモデータをダウンロードして、手を動かしながら進めてみてください！*
