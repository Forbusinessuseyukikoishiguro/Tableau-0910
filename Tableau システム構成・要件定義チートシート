# Tableau システム構成・要件定義チートシート

## 1. Tableauとは

### 1.1 概要
- **BI（Business Intelligence）ツール** - データ可視化・分析プラットフォーム
- **セルフサービス分析** - 非エンジニアでも直感的にダッシュボード作成可能
- **リアルタイム分析** - 大量データの高速処理・可視化

### 1.2 主要製品
- **Tableau Desktop** - 個人用分析・ダッシュボード作成
- **Tableau Server** - オンプレミス版サーバー
- **Tableau Cloud** - クラウド版（旧Tableau Online）
- **Tableau Prep** - データ準備・クレンジング
- **Tableau Mobile** - モバイル端末での閲覧

## 2. Tableauシステム構成

### 2.1 基本構成パターン

#### 単一サーバー構成（小規模）
```
[ユーザー] → [Tableau Server] → [データベース]
                    ↓
              [ファイルストレージ]
```

#### 分散構成（中～大規模）
```
[ロードバランサー]
        ↓
[Tableau Server Cluster]
├── Gateway Node（Web層）
├── Application Server Node（処理層）
├── Data Engine Node（データ層）
└── Repository Node（メタデータ）
        ↓
[外部データソース群]
├── RDB（PostgreSQL/Oracle/SQL Server）
├── クラウドDB（Snowflake/Redshift）
├── NoSQL（MongoDB）
└── ファイル（CSV/Excel）
```

### 2.2 Tableau Cloudアーキテクチャ
```
[ユーザー] → [Tableau Cloud] → [データコネクタ]
                                    ↓
                            [オンプレミス/クラウドDB]
                                    ↑
                            [Tableau Bridge]（オンプレ接続用）
```

## 3. 要件定義のポイント

### 3.1 機能要件チェックリスト

#### ユーザー要件
- [ ] **利用者数** - 同時接続ユーザー数、総ライセンス数
- [ ] **権限管理** - 部署別・役職別アクセス制御
- [ ] **ダッシュボード要件** - 必要な可視化の種類・数
- [ ] **レポーティング** - 定期レポート・アラート機能

#### データ要件
- [ ] **データソース** - 接続先システム・DB・ファイル
- [ ] **データ量** - 処理対象データの規模・増加予測
- [ ] **更新頻度** - リアルタイム/バッチ更新の要件
- [ ] **データ保持期間** - 履歴データの保存期間

#### 分析要件
- [ ] **分析内容** - KPI・メトリクス定義
- [ ] **可視化タイプ** - グラフ・表・地図等の要件
- [ ] **インタラクティブ機能** - フィルター・ドリルダウン
- [ ] **統計解析** - トレンド分析・予測分析の必要性

### 3.2 非機能要件チェックリスト

#### 性能要件
- [ ] **応答時間** - ダッシュボード表示速度（通常3秒以内）
- [ ] **同時接続数** - ピーク時の同時利用者数
- [ ] **データ処理量** - 1回の処理で扱うデータ量上限
- [ ] **バックアップ・復旧時間** - RTO/RPO要件

#### 可用性・セキュリティ
- [ ] **稼働率** - サービス可用性（99.9%等）
- [ ] **認証方式** - AD/LDAP/SAML/OAuth連携
- [ ] **データ暗号化** - 保存時・転送時の暗号化要件
- [ ] **監査ログ** - アクセスログ・操作履歴の要件

## 4. システム要件・推奨スペック

### 4.1 Tableau Server要件

#### 最小構成（検証・小規模環境）
- **CPU**: 4コア以上
- **メモリ**: 16GB以上
- **ストレージ**: 500GB以上（SSD推奨）
- **OS**: Windows Server 2019/2022, Linux（RHEL/Ubuntu）

#### 本番環境推奨構成
- **CPU**: 8コア以上（16コア推奨）
- **メモリ**: 32GB以上（64GB推奨）
- **ストレージ**: 1TB以上 SSD
- **ネットワーク**: 1Gbps以上

### 4.2 データベース要件
- **接続方式**: ODBC/JDBC/API接続
- **対応DB**: PostgreSQL, MySQL, Oracle, SQL Server, Snowflake等
- **ネットワーク**: 安定した接続（VPN/専用線推奨）

## 5. 導入パターン別構成例

### 5.1 スモールスタート構成
```
【Phase1: 部署単位導入】
Tableau Desktop（5-10ライセンス）
└── 既存Excel/CSV + 小規模DB接続

【Phase2: 全社展開】
Tableau Server（50-100ライセンス）
├── データウェアハウス構築
└── 権限管理・セキュリティ強化
```

### 5.2 大規模企業向け構成
```
【本格BIプラットフォーム】
Tableau Server Cluster
├── Gateway: 2台（冗長化）
├── App Server: 4台（負荷分散）
├── Data Engine: 2台（専用ノード）
└── Repository: PostgreSQL HA構成

データ基盤連携
├── データレイク（S3/Azure Data Lake）
├── データウェアハウス（Snowflake/Redshift）
└── リアルタイム処理（Kafka/Kinesis）
```

## 6. データ連携パターン

### 6.1 接続方式の選択

#### ライブ接続
- **メリット**: リアルタイムデータ、ストレージ不要
- **デメリット**: DB負荷大、ネットワーク依存
- **適用場面**: 小規模データ、リアルタイム性重視

#### 抽出（Extract）
- **メリット**: 高速表示、DB負荷軽減
- **デメリット**: データ遅延、ストレージ必要
- **適用場面**: 大量データ、定期更新で十分

### 6.2 データ準備フロー
```
[生データ] → [Tableau Prep] → [クレンジング] → [Tableau Server]
     ↓              ↓              ↓
[CSV/Excel]   [データ結合]    [抽出ファイル]
[DB抽出]      [計算フィールド]  [スケジュール更新]
```

## 7. セキュリティ設計

### 7.1 認証・認可設計
```
【認証層】
Active Directory/LDAP ← → Tableau Server
                              ↓
【認可層】
サイト管理 → プロジェクト管理 → ワークブック・データソース権限
```

### 7.2 データセキュリティ
- **行レベルセキュリティ** - ユーザー属性による表示制限
- **列レベルセキュリティ** - 機密項目の非表示
- **データソース権限** - 接続情報の保護

## 8. 運用・保守要件

### 8.1 監視項目
- [ ] **サーバーリソース** - CPU/メモリ/ディスク使用率
- [ ] **応答時間** - ダッシュボード表示速度
- [ ] **エラー率** - 接続エラー・処理エラー
- [ ] **ライセンス使用状況** - アクティブユーザー数

### 8.2 定期作業
- [ ] **データ更新** - 抽出データの更新スケジュール
- [ ] **バックアップ** - サーバー設定・ワークブックの保護
- [ ] **パフォーマンス最適化** - 不要データの削除・インデックス調整
- [ ] **ユーザー管理** - 権限見直し・非アクティブユーザー整理

## 9. コスト設計

### 9.1 ライセンス体系
- **Tableau Creator** - フル機能（分析・作成・管理）
- **Tableau Explorer** - 編集・操作（作成機能制限）
- **Tableau Viewer** - 閲覧のみ

### 9.2 コスト最適化ポイント
- [ ] 利用者の役割に応じたライセンス選択
- [ ] Cloud vs On-premises のTCO比較
- [ ] データストレージ容量の最適化
- [ ] 不要なワークブック・データソースの整理

## 10. 導入プロジェクト進行チェックリスト

### 10.1 要件定義フェーズ
- [ ] ステークホルダー特定・巻き込み
- [ ] 現状分析（既存レポート・課題整理）
- [ ] 目標KPI・成果指標の設定
- [ ] データ棚卸し・品質評価

### 10.2 設計・構築フェーズ
- [ ] インフラ設計・調達
- [ ] データモデル設計
- [ ] セキュリティ・権限設計
- [ ] ダッシュボードプロトタイプ作成

### 10.3 テスト・展開フェーズ
- [ ] 性能テスト・負荷テスト
- [ ] ユーザー受入テスト
- [ ] 段階的展開計画
- [ ] 運用手順書・マニュアル整備

## 11. よくある課題と対策

### 11.1 技術的課題
❌ **表示が遅い** → ✅ 抽出の活用・データ最適化
❌ **メモリ不足** → ✅ サーバースペック見直し・分散構成
❌ **接続エラー** → ✅ ネットワーク安定化・タイムアウト調整

### 11.2 運用課題
❌ **データ品質問題** → ✅ データ品質チェック・前処理強化
❌ **権限管理複雑化** → ✅ ガバナンスルール策定・定期見直し
❌ **利用率低迷** → ✅ 教育・サポート体制強化

---

## まとめ：成功のためのポイント

### 📊 **段階的アプローチ**
小さく始めて徐々に拡張 → PoC → 部署展開 → 全社展開

### 🔒 **セキュリティファースト**
最初からガバナンス・セキュリティを組み込んだ設計

### 👥 **ユーザー中心設計**
技術的な完璧さより、ユーザーの使いやすさを重視

### 📈 **継続的改善**
導入後の運用データを基にした最適化・改善サイクル
