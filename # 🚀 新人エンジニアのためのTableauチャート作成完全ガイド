# 🚀 新人エンジニアのためのTableauチャート作成完全ガイド

## はじめに

プロジェクト管理や進捗報告で「データを可視化してほしい」と言われて困っていませんか？この記事では、プログラミング経験があるエンジニアが、効率的にTableauを使いこなすための実践的なガイドを提供します。

## 目次
1. [Tableauの基本概念](#基本概念)
2. [データ準備のベストプラクティス](#データ準備)
3. [基本チャートの作り方](#基本チャート)
4. [進捗管理に特化したチャート](#進捗管理チャート)
5. [実践的なTips](#実践tips)
6. [よくあるトラブルシューティング](#トラブルシューティング)

---

## 🎯 基本概念

### プログラマーが理解すべきTableauの構造

```mermaid
graph TD
    A[データソース] --> B[ワークシート]
    B --> C[ダッシュボード]
    C --> D[ストーリー]
    
    B --> E[ディメンション<br/>カテゴリカルデータ]
    B --> F[メジャー<br/>数値データ]
```

**エンジニア視点での理解**
- **ディメンション** = `GROUP BY`句で使う列
- **メジャー** = `SUM()`, `COUNT()`などで集計する列
- **計算フィールド** = SQLのCASE文やストアドプロシージャのようなもの

---

## 📊 データ準備

### 1. データ構造の設計

**❌ 悪い例（人間が読みやすい形）**
```
プロジェクト | 1月進捗 | 2月進捗 | 3月進捗
ECサイト    |   30%   |   60%   |   90%
```

**✅ 良い例（正規化された形）**
```
プロジェクト | 月      | 進捗率
ECサイト    | 2024-01 |   30
ECサイト    | 2024-02 |   60  
ECサイト    | 2024-03 |   90
```

### 2. データクリーニングのチェックリスト

```sql
-- SQLエンジニア向け：データ品質チェック例
SELECT 
    COUNT(*) as total_records,
    COUNT(DISTINCT project_id) as unique_projects,
    SUM(CASE WHEN progress_rate > 100 THEN 1 ELSE 0 END) as invalid_progress,
    SUM(CASE WHEN start_date > end_date THEN 1 ELSE 0 END) as invalid_dates
FROM project_progress;
```

**Tableauでの対応**
- 空白値処理: `ISNULL([フィールド名])`
- 異常値除外: `IF [進捗率] <= 100 THEN [進捗率] END`

---

## 📈 基本チャート

### 1. 棒グラフ：基本の「き」

**手順**
1. **列**: ディメンション（例：プロジェクト名）をドラッグ
2. **行**: メジャー（例：進捗率）をドラッグ
3. **色**: ステータスをドラッグ

```javascript
// プログラマー的理解
// GROUP BY project_name 
// SELECT project_name, AVG(progress_rate)
// ORDER BY progress_rate DESC
```

### 2. 散布図：相関関係の可視化

**使用例**: 予定工数 vs 実績工数の関係
- **X軸**: 予定工数
- **Y軸**: 実績工数  
- **色**: プロジェクト種別
- **サイズ**: チームサイズ

### 3. 時系列グラフ：トレンド分析

**設定のコツ**
- 日付フィールドは「連続」に設定
- 欠損日の補間: `Analytics` → `Trend Lines`

---

## 🎯 進捗管理チャート

### 1. ガントチャート作成手順

```tableau
// 計算フィールド：期間
[終了日] - [開始日]

// 計算フィールド：進捗バー
[期間] * [進捗率] / 100
```

**実装手順**
1. **行**: タスク名
2. **列**: 開始日（連続）
3. **サイズ**: 期間
4. **色**: ステータス
5. **Dual Axis**で進捗バーを重ねる

### 2. バーンダウンチャート

```tableau
// 計算フィールド：累積残作業
RUNNING_SUM(-SUM([完了工数]))

// 計算フィールド：理想線  
WINDOW_MAX(SUM([総工数])) - 
(INDEX() - 1) * WINDOW_MAX(SUM([総工数])) / SIZE()
```

### 3. ダッシュボード設計パターン

```
┌─────────────────┬─────────────────┐
│   KPI Cards     │   Alert Panel   │
│   (4×1 grid)    │   (delayed tasks)│
├─────────────────┼─────────────────┤
│   Gantt Chart   │   Burndown      │
│   (timeline)    │   (trend)       │
├─────────────────┼─────────────────┤
│   Resource      │   Status Dist.  │
│   (workload)    │   (pie chart)   │
└─────────────────┴─────────────────┘
```

---

## 💡 実践Tips

### 1. パフォーマンス最適化

**エンジニア向けベストプラクティス**

```tableau
// ❌ 遅いクエリ
SUM(IF [日付] >= DATE('2024-01-01') THEN [売上] END)

// ✅ 速いクエリ（フィルターを使用）
SUM([売上])  // + 日付フィルター適用
```

**データベース最適化**
- インデックス作成: 日付、ID列
- 集計テーブル事前作成
- パーティショニング活用

### 2. 保守しやすい設計

```tableau
// 定数の定義（パラメーター使用）
CASE [Priority Parameter]
    WHEN "High" THEN [高優先度タスク数]  
    WHEN "Medium" THEN [中優先度タスク数]
    ELSE [低優先度タスク数]
END
```

### 3. バージョン管理

**ファイル命名規則**
```
project_dashboard_v1.0.twbx    // 初期版
project_dashboard_v1.1.twbx    // 機能追加
project_dashboard_v2.0.twbx    // メジャーアップデート
```

---

## 🔧 トラブルシューティング

### よくあるエラーと解決方法

**1. 「Cannot mix aggregate and non-aggregate comparisons」**
```tableau
// ❌ エラーになる書き方
SUM([売上]) > [目標売上]

// ✅ 正しい書き方  
SUM([売上]) > SUM([目標売上])
```

**2. 日付が文字列として認識される**
```tableau
// 変換方法
DATE(LEFT([日付文字列], 10))
DATEPARSE("yyyy/MM/dd", [日付文字列])
```

**3. パフォーマンスが遅い**
- データソースフィルターを使用
- 不要な計算フィールドを削除  
- データ抽出（Extract）を使用

### デバッグのコツ

**1. 段階的な作成**
```
データ接続 → 基本チャート → 計算フィールド → ダッシュボード
```

**2. ログの確認**
- `Help` → `Settings and Performance` → `Start Performance Recording`

**3. SQLの確認**
- `Help` → `Settings and Performance` → `View Performance Recording`

---

## 🚀 実践演習

### 課題: 進捗管理ダッシュボードを作成

**データ準備**
```csv
task_id,project,task_name,assignee,start_date,due_date,progress,status
T001,WebApp,Design,Alice,2024-01-01,2024-01-15,100,Complete
T002,WebApp,Frontend,Bob,2024-01-10,2024-02-01,65,In Progress
```

**作成するチャート**
1. プロジェクト別進捗率（棒グラフ）
2. 担当者別作業負荷（円グラフ） 
3. タスク進捗タイムライン（ガントチャート）
4. 遅延アラート（テキストテーブル）

**期待される学習成果**
- データの正規化理解
- 基本チャートの作成スキル
- ダッシュボード設計の考え方
- パフォーマンス最適化の意識

---

## 📚 さらに学習するために

### 推奨リソース

**公式ドキュメント**
- [Tableau Learning Path](https://www.tableau.com/learn)
- [Tableau Community](https://community.tableau.com/)

**エンジニア向け追加学習**
- REST API連携
- JavaScript API活用
- Python/R連携（TabPy）
- SQL最適化テクニック

**実践プロジェクト案**
1. GitHub API連携でコミット数可視化
2. サーバーログ解析ダッシュボード
3. CI/CDパイプライン監視画面
4. API レスポンス時間監視

---

## まとめ

Tableauは「Excel + SQL + BI」の良いとこ取りをしたツールです。プログラミングスキルがある皆さんなら、基本を理解すれば素早く実用的なダッシュボードを作成できるはずです。

**重要なポイント**
- データ構造の設計が8割
- 段階的なアプローチで作成
- パフォーマンスを常に意識
- ユーザーの使いやすさを優先

まずは小さなプロジェクトから始めて、徐々にスキルを積み上げていきましょう！

---

**次回予告**: 「Tableau REST APIを使った自動化テクニック」をお楽しみに！

---

*この記事が役に立ったら、ぜひチームメンバーにもシェアしてください 🚀*
